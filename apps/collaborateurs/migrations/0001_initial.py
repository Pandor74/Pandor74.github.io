# Generated by Django 2.1.2 on 2018-12-14 09:52

import collaborateurs.models
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Adresse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adresse1', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Adresse ')),
                ('adresse2', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name="Complément d'adresse ")),
                ('code_postal', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Code Postal ')),
                ('ville', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='Ville ')),
                ('pays', models.CharField(blank=True, default='France', max_length=255, null=True, verbose_name='Pays ')),
            ],
        ),
        migrations.CreateModel(
            name='Agence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name="Dénomination de l'agence ")),
                ('categorie', models.CharField(choices=[('siege', 'Siege'), ('antenne', 'Antenne')], max_length=255)),
                ('telephone', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir exactement 10 chiffres', regex='^0(?P<num>\\d{9})$')])),
                ('fax', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir exactement 10 chiffres', regex='^0(?P<num>\\d{9})$')])),
                ('mail_contact', models.EmailField(max_length=255)),
                ('logo_agence', models.ImageField(blank=True, null=True, storage=storage.OverwriteStorage(), upload_to=collaborateurs.models.image_agence_path, verbose_name="Logo de l'agence si différent (facultatif) ")),
                ('num_SIRET', models.CharField(max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro SIRET doit être composé de 14 chiffres', regex='^(?P<siret>\\d{14})$')], verbose_name='N°SIRET')),
                ('date_inscription_agence', models.DateTimeField(default=datetime.date.today, verbose_name="Date d'inscription ")),
                ('date_creation_agence', models.DateTimeField(blank=True, null=True, verbose_name="Date de création de l'agence")),
            ],
            options={
                'ordering': ['-categorie', 'nom'],
            },
        ),
        migrations.CreateModel(
            name='AppelOffre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='AppelOffreGlobal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AppelOffreLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_lancement', models.DateField(blank=True, default=datetime.date.today, verbose_name='Date de démarrage de la consultation')),
                ('date_de_creation', models.DateField(default=datetime.date.today, verbose_name='Date de création')),
                ('relance', models.IntegerField(blank=True, default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(99)], verbose_name='Intervalle de relance (jours calendaires)')),
                ('AO', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.AppelOffre')),
                ('AO_agences', models.ManyToManyField(blank=True, to='collaborateurs.Agence')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentAgence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fichier', models.FileField(blank=True, null=True, storage=storage.OverwriteStorage(), upload_to=collaborateurs.models.fichier_agence_path, verbose_name="Document de l'agence : ")),
                ('categorie', models.CharField(blank=True, choices=[('assurance', 'Assurance'), ('RC', 'Responsabilité civile'), ('autre', 'Autre')], default='autre', max_length=255, null=True, verbose_name='Catégorie de document')),
                ('agence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Agence')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentLot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fichier', models.FileField(blank=True, null=True, storage=storage.OverwriteStorage(), upload_to=collaborateurs.models.fichier_lot_path, verbose_name='Document du projet : ')),
                ('categorie', models.CharField(blank=True, choices=[('DPGF', 'DPGF'), ('CCTP', 'CCTP'), ('PLAN', 'Plan'), ('DIAG', 'Diagnostic'), ('AUTRE', 'Autre')], default='AUTRE', max_length=255, null=True, verbose_name='Catégorie de document')),
            ],
        ),
        migrations.CreateModel(
            name='DomaineCompetence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competence', models.CharField(choices=[('Façades', 'Façades'), ('Electricité', 'Electricité'), ('Non renseigné', 'Non renseigné'), ('Autre', 'Autre')], default='NR', max_length=255)),
            ],
            options={
                'ordering': ['competence'],
            },
        ),
        migrations.CreateModel(
            name='Echeance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='Date de fin de la consultation')),
                ('appel', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.AppelOffre')),
                ('appelGlobal', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.AppelOffreGlobal')),
                ('appelLot', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.AppelOffreLot')),
            ],
        ),
        migrations.CreateModel(
            name='Entreprise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_ent', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name="Nom de l'entreprise ")),
                ('type_contact', models.CharField(choices=[('client', 'Client'), ('executant', 'Executant')], default='executant', max_length=255)),
                ('date_inscription_ent', models.DateTimeField(blank=True, default=datetime.date.today, verbose_name="Date d'inscription ")),
                ('date_creation_ent', models.DateTimeField(blank=True, null=True, verbose_name="Date de création de l'entreprise")),
                ('logo_ent', models.ImageField(blank=True, null=True, storage=storage.OverwriteStorage(), upload_to=collaborateurs.models.fichier_entreprise_path, verbose_name="Logo de l'entreprise (facultatif) ")),
                ('num_SIREN', models.CharField(max_length=9, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro SIREN doit être composé de 9 chiffres exactement ', regex='^(?P<siren>\\d{9})$')], verbose_name='N°SIREN (9 premiers chiffres du N°SIRET) ')),
            ],
            options={
                'ordering': ['nom_ent'],
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero', models.IntegerField(verbose_name='Numéro du lot ')),
                ('suffixe', models.CharField(blank=True, choices=[('', 'Suffixe'), ('A', 'A'), ('B', 'B'), ('C', 'C'), ('bis', 'Bis'), ('ter', 'Ter')], default='', max_length=5, verbose_name='Suffixe')),
                ('description', models.TextField(blank=True, help_text='Décrivez de manière succincte les éléments constitutifs du travail à faire', null=True, verbose_name='Description succincte ')),
                ('short_name', models.CharField(help_text='Sera utilisé dans la barre de navigation', max_length=10, null=True, verbose_name='Nom court pour identifier le lot facilement')),
                ('nom', models.CharField(max_length=255, null=True, verbose_name='Nom du lot ')),
                ('publier', models.BooleanField(default=False)),
                ('activites', models.ManyToManyField(blank=True, to='collaborateurs.DomaineCompetence')),
            ],
            options={
                'ordering': ['numero', 'suffixe'],
            },
        ),
        migrations.CreateModel(
            name='Personne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prenom', models.CharField(max_length=255, verbose_name='Prénom ')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom ')),
                ('portable', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir exactement 10 chiffres et commencer par 0', regex='^0(?P<num>\\d{9})$')])),
                ('ligne_directe', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit contenir exactement 10 chiffres et commencer par 0', regex='^0(?P<num>\\d{9})$')])),
                ('mail', models.EmailField(max_length=255)),
                ('date_inscription_personne', models.DateTimeField(default=datetime.datetime(2018, 12, 14, 9, 52, 13, 302724, tzinfo=utc), verbose_name="Date d'inscription ")),
                ('agence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Agence')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('numero_teamber', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True, verbose_name='Numéro Teamber (unique) ')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom du projet ')),
                ('agence', models.CharField(blank=True, choices=[('Annecy', 'Annecy'), ('Lyon', 'Lyon')], default='Annecy', max_length=20, null=True, verbose_name='Agence interne')),
                ('photo', models.ImageField(blank=True, null=True, storage=storage.OverwriteStorage(), upload_to=collaborateurs.models.image_path, verbose_name='Photo du projet (facultatif) ')),
                ('date_creation', models.DateField(default=datetime.date.today, verbose_name='Date de création ')),
            ],
            options={
                'verbose_name': 'Projet',
                'verbose_name_plural': 'Projets',
                'ordering': ['-numero_teamber'],
            },
        ),
        migrations.CreateModel(
            name='Propriete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nb_logements', models.IntegerField(blank=True, default=0, null=True, verbose_name='Nombre de logements ')),
                ('nb_etages', models.IntegerField(blank=True, default=0, null=True, verbose_name="Nombre d'étages ")),
                ('surf_sol', models.IntegerField(blank=True, default=0, null=True, verbose_name='Surface au sol (m²) ')),
                ('surf_shon', models.IntegerField(blank=True, default=0, null=True, verbose_name='Surface SHON (m²) ')),
                ('date_fin', models.DateField(blank=True, null=True, verbose_name='Date de rendu ')),
                ('architecture', models.CharField(blank=True, choices=[('Basique', 'Basique'), ('Moyenne', 'Moyenne'), ('Complexe', 'Complexe')], max_length=255, null=True, verbose_name="Type d'architecture ")),
                ('secteur', models.CharField(blank=True, choices=[('Copropriété', 'Copropriété'), ('Tertiaire', 'Tertiaire'), ('Social', 'Social'), ('Individuel', 'Individuel')], max_length=255, null=True, verbose_name='Catégorie de clientèle ')),
                ('travaux', models.CharField(blank=True, choices=[('Rénovation', 'Rénovation'), ('Sinistre', 'Sinistre'), ('Neuf', 'Neuf')], max_length=255, null=True, verbose_name='Type de travaux')),
                ('consultation', models.CharField(blank=True, choices=[('lot', 'Marché par lot'), ('global', 'Marché global')], max_length=255, null=True, verbose_name='Mode de consultation')),
                ('projet', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet')),
            ],
        ),
        migrations.CreateModel(
            name='SecteurGeographique',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('departement', models.CharField(blank=True, choices=[('rhone', 'Rhône'), ('ain', 'Ain'), ('haute savoie', 'Haute-Savoie'), ('isere', 'Isère'), ('autre', 'Autre'), ('NR', 'Non renseigné')], default='NR', max_length=255)),
                ('region', models.CharField(blank=True, choices=[('AUV-RN', 'Auvergne Rhône Alpes'), ('france', 'France entière'), ('autre', 'Autre'), ('NR', 'Non renseigné')], default='NR', max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name='lot',
            name='projet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
        migrations.AddField(
            model_name='echeance',
            name='projet',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
        migrations.AddField(
            model_name='documentlot',
            name='lot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='collaborateurs.Lot'),
        ),
        migrations.AddField(
            model_name='appeloffrelot',
            name='AO_personnes',
            field=models.ManyToManyField(blank=True, to='collaborateurs.Personne'),
        ),
        migrations.AddField(
            model_name='appeloffrelot',
            name='lot',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Lot'),
        ),
        migrations.AddField(
            model_name='appeloffrelot',
            name='projet',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
        migrations.AddField(
            model_name='appeloffreglobal',
            name='projet',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
        migrations.AddField(
            model_name='appeloffre',
            name='lots',
            field=models.ManyToManyField(blank=True, to='collaborateurs.Lot'),
        ),
        migrations.AddField(
            model_name='appeloffre',
            name='projet',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
        migrations.AddField(
            model_name='agence',
            name='competences_agence',
            field=models.ManyToManyField(blank=True, to='collaborateurs.DomaineCompetence'),
        ),
        migrations.AddField(
            model_name='agence',
            name='entreprise',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Entreprise'),
        ),
        migrations.AddField(
            model_name='agence',
            name='lots',
            field=models.ManyToManyField(blank=True, related_name='repondants', to='collaborateurs.Lot'),
        ),
        migrations.AddField(
            model_name='adresse',
            name='agence',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Agence'),
        ),
        migrations.AddField(
            model_name='adresse',
            name='projet',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collaborateurs.Projet'),
        ),
    ]
